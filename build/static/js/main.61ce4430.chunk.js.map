{"version":3,"sources":["Service/QuizApi.ts","Components/Quix.tsx","Components/Result.tsx","Components/Header.tsx","App.tsx","index.tsx"],"names":["getQuestions","totalQuestions","level","a","fetch","fetchQuestions","json","results","quizQuestions","map","questionObj","array","answerArray","incorrect_answers","correct_answer","question","answer","options","sort","Math","random","Quiz","handleStep","useState","score","setScore","setActive","ans","undefined","className","i","value","onClick","Result","totalScore","newGame","Header","difficultyLevel","setDifficultyLevel","setTotalQuestions","nextQuestion","setNextQuestion","quizQues","setQuizQuestions","count","setCount","showResult","setResult","total","setTotal","useEffect","length","prev","htmlFor","name","required","onChange","e","target","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.61ce4430.chunk.js","sourcesContent":["import {fetchedQuestions, quizQuestions} from '../Types/types'\n\nconst shuffleArray = (array: any[]) =>\n    [...array].sort(() => Math.random() - 0.5)\n\nexport const getQuestions = async (totalQuestions: number, level: string) : Promise<quizQuestions[]> => {\n    const fetchQuestions = await fetch(`https://opentdb.com/api.php?amount=${totalQuestions}&difficulty=${level}&type=multiple`)\n\n    const { results }  = await fetchQuestions.json()\n    const quizQuestions : quizQuestions[] = results.map((questionObj: fetchedQuestions) => {\n        const answerArray = [...questionObj.incorrect_answers, questionObj.correct_answer]\n        return {\n            question: questionObj.question,\n            answer: questionObj.correct_answer,\n            options: shuffleArray(answerArray)\n        }\n    })\n    return quizQuestions\n}","import React, { useState } from 'react'\nimport '../App.css'\nimport {questionProps} from '../Types/types'\n\nconst Quiz: React.FC<questionProps> = ({question,answer,options,handleStep}) => {\n    let [score,setScore] = useState(0)\n    let setActive = (ans : string):void => {\n        if (answer===ans) {\n            setScore(++score)\n        }\n        handleStep(score);\n    }\n\n    if(typeof question === undefined) {\n        return (\n            <h2>Loading....</h2>\n        )\n    }\n\n    return (\n        <div className='quiz-container'>\n            <div>\n               {question && <h3> Q: { question}</h3>}\n            </div>\n            <div>\n                <ul>\n                    {options && options.map((answer:string, i:number) => {\n                        return (\n                        <li key={i} value={answer} onClick={()=>setActive(answer)} className='option-list'>{answer}</li>\n                        )\n                    })}\n                </ul>\n            </div>\n        </div>\n    )\n}\n\nexport default Quiz\n","import React from 'react'\nimport '../App.css'\nimport {result} from '../Types/types'\n\nconst Result:React.FC<result> = ({totalScore,newGame}) => {\n    return (\n        <div className='quiz-container'>\n            <h3>Your Total Score is <strong>{totalScore}</strong></h3>\n            <button className='next' onClick={newGame}>Play Again</button>\n        </div>\n    )\n}\n\nexport default Result\n","import React, { useEffect, useState } from 'react'\nimport { getQuestions } from './../Service/QuizApi'\nimport '../App.css'\nimport Quiz from './Quix'\nimport Result from './Result'\nimport { quizQuestions } from '../Types/types'\n\nconst Header: React.FC = () => {\n    const [difficultyLevel, setDifficultyLevel] = useState('')\n    const [totalQuestions, setTotalQuestions] = useState(0)\n    const [nextQuestion, setNextQuestion] = useState(0)\n    const [quizQues, setQuizQuestions] = useState<quizQuestions[]>([])\n    let [count, setCount] = useState(false)\n    let [showResult, setResult] = useState(false)\n    let [total, setTotal] = useState(0)\n\n    let handleQuestions = (e: any) => {\n        setTotalQuestions(e.target.value)\n    }\n\n    let handleDifficulty = (e: any) => {\n        setDifficultyLevel(e.target.value)\n    }\n\n    const fetchQuiz = () => {\n        setCount(true)\n    }\n\n    let handleStep = (score: number) => {\n        if (nextQuestion !== quizQues.length - 1) {\n            setNextQuestion(prev => prev + 1)\n        } else if (nextQuestion === quizQues.length - 1) {\n            setTotal(score)\n            setResult(true)\n        }\n    }\n\n    let handleNewGame = () => {\n        setResult(false)\n        setCount(false)\n    }\n\n    useEffect(() => {\n        const fetchQuestions = async () => {\n            const quizQues: quizQuestions[] = await getQuestions(totalQuestions, difficultyLevel);\n            setQuizQuestions(quizQues)\n        }\n        fetchQuestions()\n    }, [totalQuestions, difficultyLevel, count])\n\n    if (showResult) {\n        return (\n            <Result\n                totalScore={total}\n                newGame={handleNewGame}\n            />\n        )\n    }\n\n    if (count) {\n        return (\n            <Quiz\n                question={quizQues[nextQuestion].question}\n                answer={quizQues[nextQuestion].answer}\n                options={quizQues[nextQuestion].options}\n                handleStep={handleStep}\n            />\n        )\n    }\n    return (\n        <div className='quiz-container'>\n            <h1 className='title'>Quiz Application</h1>\n            <div className='box'>\n                <h2>Test Yourself</h2>\n                <div className='difficulty-select'>\n                    <label htmlFor='difficulty-level'>Select a dificult level</label>\n                    <select name='difficulty-level' required={true} onChange={handleDifficulty}>\n                        <option value=''>Select difficulty</option>\n                        <option value='easy'>Easy</option>\n                        <option value='medium'>Medium</option>\n                        <option value='hard'>Hard</option>\n                    </select>\n                </div>\n                <div className='question-select'>\n                    <label htmlFor='questions'>Select number of Questions</label>\n                    <select name='questions' required={true} onChange={handleQuestions}>\n                        <option value=''>Select total</option>\n                        <option value={5}>5</option>\n                        <option value={10}>10</option>\n                        <option value={15}>15</option>\n                    </select>\n                </div>\n                <div>\n                    <button onClick={fetchQuiz} className='play'>Play</button>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Header\n","import React from 'react';\nimport './App.css';\nimport Header from './Components/Header';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}